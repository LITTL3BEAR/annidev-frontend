@use "sass:map";
@use 'variables' as v;

@mixin custom-snackbar($theme) {
  $color-config: map.get($theme, color);
  $background: map.get($color-config, background);
  $foreground: map.get($color-config, foreground);

  $snackbar-types: (
    success: v.$snackbar-success,
    error: v.$snackbar-error,
    info: v.$snackbar-info,
    warning: v.$snackbar-warning
  );

  .mat-mdc-snack-bar-container {
    @each $type, $color in $snackbar-types {
      &.snackbar-#{$type} {
        --mdc-snackbar-container-color: #{rgba($color, v.$snackbar-opacity)};
        --mat-mdc-snack-bar-button-color: #{map.get($foreground, text)};
        --mdc-snackbar-supporting-text-color: #{map.get($foreground, text)};
      }
    }

    .mdc-snackbar__surface {
      border-radius: v.$border-radius;
    }

    .mat-mdc-snack-bar-label {
      font-weight: 500;
    }

    .mat-mdc-snack-bar-actions {
      padding-inline-start: 8px;
    }
  }

  @each $type, $color in $snackbar-types {
    .snackbar-#{$type} {
      @if (lightness($color) > 50) {
        --mat-mdc-snack-bar-button-color: #{map.get($foreground, dark-text)};
        --mdc-snackbar-supporting-text-color: #{map.get($foreground, dark-text)};
      } @else {
        --mat-mdc-snack-bar-button-color: #{map.get($foreground, light-text)};
        --mdc-snackbar-supporting-text-color: #{map.get($foreground, light-text)};
      }
    }
  }
}